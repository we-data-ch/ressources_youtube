---
title: "purrr en bref"
author: "Vestin Hategekimana"
format: html
editor: visual
---

## purrr

```{r}
# install.packages("purrr")
library(purrr, quietly = TRUE)
```

## Vecteur vs Liste

Un vecteur est un ensemble d'éléments du même type, alors qu'une liste n'a pas besoin d'avoir des éléments du même type.

```{r}
mon_vecteur <- c(4, 1, 7, 2)

ma_liste <- list(1, "fd", TRUE, iris, 1:3, iris)
```

Cela signifie qu'il est plus facile d'appliquer des opérations vectorielles à un vecteur qu'à une liste, car le contenu est prévisible.

```{r}
mon_vecteur + 2
sum(mon_vecteur)
paste("a", mon_vecteur)
```

Ce que nous allons présenter s'applique à la fois aux listes et aux vecteurs, mais il est préférable d'utiliser les options vectorisées pour les vecteurs, car elles sont plus simples et plus rapides.

## Interation et boucles for

## Introduction à map()

La fonction `map()` est une fonction essentielle du package purrr de R. Elle vous permet d'appliquer une fonction à chaque élément d'un vecteur ou d'une liste et de renvoyer les résultats dans un nouveau vecteur ou une nouvelle liste. Il s'agit d'un outil puissant pour travailler avec des données dans un style de programmation fonctionnelle.

La syntaxe de base de `map()` est la suivante :

```{r}
?map()
```

### Application d'une fonction à chaque élément

Exemple avec la fonction plus2 :

```{r}
nombres <- c(1, 2, 3, 4, 5)
liste_nombres <- list(1, 2, 3, 4, 5)

plus2 <- function(x){
x + 2
}

# Vecteur
plus2(nombres)

# Liste
map(liste_nombres, plus2)
```

`map` renvoie toujours une liste !

### Compatible avec les tuyaux

Il est également compatible avec les tuyaux :

```{r}
# Amical pour les tuyaux
library(dplyr, quietly = TRUE)

liste_nombres %>% 
map(plus2)
```

### Ajouter des paramètres

Vous pouvez ajouter des paramètres à la fonction après une virgule :

```{r}
plus <- function(x, y = 0){
x + y
}

map(liste_nombres, plus, 1)
```

### Formule

Nous pouvons également utiliser des formules pour des fonctions courtes que nous ne réutiliserons pas forcément. Commençons par un exemple simple. Supposons que nous ayons un vecteur de nombres et que nous voulions élever chacun d'entre eux au carré. Nous pouvons utiliser `map()` comme ceci :

```{r}
map(liste_nombres, ~ .x^2)
```

Le `~` crée une fonction anonyme qui prend l'élément courant `.x` et le met au carré. `map()` l'applique à chaque élément de `numbers` et renvoie un nouveau vecteur `squared` avec les valeurs élevées au carré. Plus tard, quand il y aura un second paramètre, nous utiliserons `.y`.

### Fonctions anonymes

Nous pouvons aussi utiliser une autre façon plus contrôlable d'utiliser des fonctions anonymes à la place :

```{r}
# Simple
map(liste_nombres, \(x) x^2)

# 2 paramètres (1)
map(liste_nombres, \(x, y) x + y, 2)

# 2 paramètres (2)
map(liste_nombres, \(x, one) x - one, 1)
```

Cette option vous offre une plus grande flexibilité, car vous pouvez définir un nombre infini de paramètres que vous pouvez nommer comme vous le souhaitez (vous n'êtes pas obligé d'utiliser x ou y).

### Index et sélection

Rappelez-vous que pour sélectionner un élément d'une liste en utilisant son index, vous avez besoin de 2 parenthèses, mais seulement d'une pour les vecteurs.

```{r}
mon_vecteur[1] + 1
ma_liste[[1]] + 1
```

La fonction `pluck()` de `purrr` est un remplacement sûr pour bracket puisqu'elle n'envoie pas d'erreur si la chose que nous cherchons n'existe pas :

```{r}
# Erreur
# ma_liste[[100]]

# Pas d'erreur
pluck(ma_liste, 100)

# Changer la valeur par défaut
pluck(ma_liste, 100, .default = "No")
```

### Sélection imbriquée et pluck

Bien entendu, nous pouvons également accéder aux éléments imbriqués dans la liste :

```{r}
nested_list <- list(
c(1, 5, 10),
c(3, 3, 3)
)

# Classique
nested_list[[1]][[1]]

# Pluck
pluck(nested_list, 1, 1)
```

### Sélection par nom et cueillette

Vous pouvez également donner un nom à un élément d'une liste ou d'un vecteur et l'utiliser pour le sélectionner :

```{r}
named_list <- list(
a = c(1, 6),
b = c(91)
)

# Classique
named_list$a

# Pluck 
pluck(named_list, "b")
```

### Map et pluck

Vous pouvez alors sélectionner par index ou par nom, lorsque vous utilisez cette sélection, `map()` utilise `pluck()` sous le capot :

```{r}
list_list <- list(
c(5, 2, 2, 4),
c(9, 2, 3),
c(0, 1),
list(a = 1, b = 4, c = 7, d = 2, e = c(1, 5, 10)) 
)

# Premier élément
map(list_list, 1)

# Deuxième élément
map(list_list, "c")

# Éléments imbriqués
map(list_list, list("e", 2))
```

### Progression

Vous pouvez suivre la progression du travail en utilisant le paramètre `.progress = TRUE` :

```{r}
wait_2_sec <- function(x){
Sys.sleep(2)
}

map(liste_nombres, wait_2_sec, .progress = TRUE)
```

### Types

Comme nous l'avons mentionné, `map()` renvoie une liste par défaut. Si vous voulez un type de sortie différent, vous pouvez utiliser une des variantes comme `map_dbl()` pour un tableau numérique ou `map_chr()` pour un tableau de caractères. Il est utile de forcer un type à la fin (transformer en vecteur) ou de contrôler si quelque chose s'est mal passé au début (lancer une erreur).

```{r}
map(liste_nombres, plus2)

# Vecteur (décider du type)
map_vec(liste_nombres, plus2)

# Entier
map_int(liste_nombres, plus2)

# Double (float)
map_dbl(liste_nombres, plus2)

# Caractère (string)
map_chr(liste_nombres, plus2)

# Erreur logique (bool)
# map_lgl(liste_des_numéros, plus2)
```

### Fonctions remplacées

Ma fonction préférée est `map_dfr()` qui retourne un dataframe à la fin, mais elle a été supprimée pour des raisons de cohérence : Les fonctions supprimées ont été remplacées par des solutions supérieures, mais en raison de leur utilisation répandue, elles ne disparaîtront pas. Cependant, elles ne bénéficieront pas de nouvelles fonctionnalités et ne recevront que des corrections de bogues critiques.

Source : \<\> : <https://purrr.tidyverse.org/reference/map_dfr.html>

```{r}
# Superseded
# DataFrame (ligne)
map_dfr(liste_nombres, \(x) tibble(col = x + 1))

# DataFrame (colonne)
map_dfc(liste_nombres, \(x) tibble(col = x + 1))
```

### Alternatives à superseded

Les problèmes avec `map_dfr()` sont les suivants :

-   Requiert `dplyr::bind_rows()`

-   Valeur retournée avec n'importe quelle taille

La méthode recommandée est d'utiliser la variante de la fonction `map()` qui fonctionne pour nous avec `list_rbind()` (note `|>` est une fonction pipe qui signifie passer le résultat à la fonction suivante et qui est intégrée dans R) :

```{r}
# DataFrame (ligne)
map(liste_nombres, \(x) tibble(col = x + 1)) |>
list_rbind()

# DataFrame (colonne)
map(liste_nombres, \(x) tibble(col = x + 1)) |>
list_cbind()
```

### Marche et effets secondaires

La principale différence entre `map()` et `walk()` dans le package purrr est que `map()` est utilisé quand vous voulez retourner les résultats de l'application d'une fonction à chaque élément d'un vecteur ou d'une liste, alors que `walk()` est utilisé quand vous voulez effectuer une action avec des effets de bord pour chaque élément mais que vous ne vous souciez pas des valeurs de retour.

Utilisez `walk()` quand :

-   Vous voulez effectuer une action avec des effets secondaires sur chaque élément, comme l'impression, le traçage ou l'enregistrement sur disque, mais vous n'avez pas besoin de stocker les résultats.

-   Vous voulez modifier chaque élément sur place mais vous n'avez pas besoin de renvoyer quoi que ce soit.

```{r}
# Résultat
map(liste_nombres, plus2)

# Pas de résultat
walk(liste_nombres, plus2)
```

Par défaut, map ne renvoie rien. Mais c'est parfait pour importer/sauvegarder des résultats par exemple.

```{r}
save_it <- function(x){
  nom_du_fichier <- paste0(x, ".rda")
  save(x, file = nom_du_fichier)
}

# Sauvegarde des fichiers avec le nom de la valeur
walk(liste_nombres, save_it)
```

## Variantes de la carte

```{r}
la_liste <- list(3, 3, 3, 3, 3)

modify(la_liste, plus2)

la_liste
```