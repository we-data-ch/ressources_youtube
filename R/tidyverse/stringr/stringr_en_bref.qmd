---
title: "Stringr en bref"
format: html
execute:
  echo: true
editor: 
  markdown: 
    wrap: 80
---

## Introduction

Le package stringr fait partie du tidyverse et fournit des outils cohérents et
simples pour la manipulation de chaînes de caractères en R.

**Sources:**

-   stringr: <https://stringr.tidyverse.org/index.html>

-   Cheat sheet: <https://github.com/rstudio/cheatsheets/blob/main/strings.pdf>

-   Expressions régulières:
    <https://stringr.tidyverse.org/articles/regular-expressions.html>

### Charger la librairie

```{r setup}
# install.packages("stringr")
library(stringr)
# ou
library(tidyverse)
```

### Rapide introduction

```{r}
# Crash course
vignette("stringr")
```

La majorité des fonctions de stringr n'apportent rien de nouveau par rapport à
ce que R sait déjà faire (ex. paste, strsplit, etc.). Par contre elles sont:

-   Explicites (str\_\* vs rep, grep, sub, strsplit, etc.)
-   Généralement plus rapides et constuites autour du package stringi (écrit en
    C++)
-   Dans la même philosophie: "Les données en premier"

```{r}
salut <- "Salut à toi!"

# Données en premier ----
## Base R
sub("toi", "WeData", salut)

## stringr
str_replace(salut, "toi", "WeData")

# Permet d'enchaîner les opérations ----
"HELLO!" |> 
    str_to_title() |>
    str_replace("!", " ") |>
    str_c("world")
```

## Opérations de chaînes de caractères de base

### str_length() : Récupérer la longueur d'une chaîne de caractères

```{r}
# Exemple
texte <- "Hello, World!"

# Longueur en caractères
str_width(texte) # str_width() "espace occupé"
```

## Exemples d'utilisation

### Exemple vectorisé

```{r}
# Vecteur de textes
des_textes <- c("premier texte", "deuxième texte")

# Longueur en caractère
str_length(des_textes)
```

### Exemple dans dplyr

```{r}
# library(dplyr)

# Compter la longeur des noms d'espèces
iris %>%
    mutate(longueur = str_length(Species))

# Filtrer les espèces avec moins de 5 caractères
iris %>%
    filter(str_length(Species) >= 8)
```

### str_c(): Concatener (joindre) des chaines de caractères

```{r}
# Par élément
str_c("Hello", "World")

# En un seul résultat
str_c(c("a", "b", "c"), collapse = ", ")
```

## Opérations simples

### Les castes

```{r}
vecteur_texte <- c("chat", NA, "  Zoo  ", "ceci est une phrase", "12")

# Tout en Majuscule
str_to_upper(vecteur_texte)

# Tout en minuscule
str_to_lower(vecteur_texte)

# Début en majuscule
str_to_sentence(vecteur_texte)

# Début de chaque mot en majuscule
str_to_title(vecteur_texte)
```

### Ordonner les listes

```{r}
alpha <- c("r", NA, "d", "a", "f", "b")

# Ordonner
str_sort(alpha)
```

### Valeurs uniques

```{r}
a <- c("an", "b", "An")

# Unique mais en plus puissant
str_unique(a, ignore_case = TRUE)
unique(a)
```

### Utilitaires

encoding: https://www.youtube.com/watch?v=0AqDNXDd_Mk

```{r}
# Na en texte
str_replace_na(vecteur_texte)

# Si deux textes sont similaires
str_equal(vecteur_texte, "chat")

# Convertir en encoding (bad encoding)
str_conv(vecteur_texte, encoding = "UTF-8")
# stringi::stri_enc_list()

# Nombre de caractères par ligne
str_wrap(vecteur_texte[4], width = 3)

# Retirer les espaces aux extrémités
str_trim(vecteur_texte[3])

# Dupliquer un text x fois
str_dup("chat", 3)
```

### Voir les caractères spéciaux et les correspondances

```{r}
contenu <- "La\u00A0conférence est très intéressante. Il y avait beaucoup de participants, dont des scientifiques et des entrepreneurs.\nLe sujet était le « Machine Learning » et on a discuté de ses applications dans les domaines de l'intelligence artificielle. Je me suis rendu compte que les gens étaient vraiment passionnés par ce sujet et il y avait une grande diversité d'opinions. C'était un peu frustrant, mais c'est comme ça que fonctionne la discussion."

contenu

epices <- c("curry", "sel", "poivre")

# Voir les caractères spéciaux
str_view(contenu, fixed("e")) # pattern, match
```

### str_sub(): Extraire/remplacer des sous-chaines de caractères

```{r}
# Extraire une partie
str_sub(texte, 1, 2) 

# Extraire deux parties
str_sub(texte, c(1, 8), c(6, 14))

# Vecteur exemple 1
str_sub(des_textes, c(1, 2), c(2, 4))

# Vecteur exemple 2
str_sub_all(des_textes, start = c(1, 2), end = c(2, 4))
```

### word(): str_sub() pour les mots

```{r}
phrases <- c("Je suis content.", "Je parle allemand.")

word(phrases, 2, 3) # start/end
```

### str_glue(): Ajouter/coller des valeurs au texte

```{r}
# Exemple 1
nom <- "Idriss"
age <- 25

str_glue("Il s'appelle {nom} et il a {age} ans.") # calcule

# Exemple 2
str_glue("Elle s'appelle {nom} et elle a {age} ans.", nom = "Patience", age = 32)
```

### str_glue_data(): Ajouter/coller des valeurs au texte par dataframe

```{r}
df <- tibble(nom = c("Cindy", "Amina", "Macha"),
             age = c(50, 25, 18),
             poid = c(65, 70, 60),
             taille = c(1.70, 1.60, 1.65))

df %>%
 str_glue_data("{nom}, elle a {age} ans et elle a un IMC de {round(poid/(taille^2))}")
```

## Correspondance de motif (pattern matching): expressions régulières

### str_subset(): Selectionner l'entièrté à partir d'une partie

```{r}
# Vecteur de fruits
fruits <- c("pomme", "banane", "orange")

# Exemple simple
str_subset(fruits, "an")

# Exemple avancé
emails <- c("Mon adresse", "nom@gmail.com", "nom@outlook.com")

str_subset(emails, "\\w+@\\w+\\.\\w+") # all
```

### Compter les motifs

```{r}
# Compter combien il y a de fois "an"
str_count(fruits, "an")
```

### Modifieurs

#### fixed() / regex() / boundary() / coll()

-   Les motifs sont par défaut en expréssion régulière (regex)
-   Bien souvent utiliser les escapes "\\" peut régler le problème
-   Il est aussi possible d'utiliser fixed()
-   fixed() et regex()

```{r}
# Liste
fruits <- c("un abricot.", "une banane!", "une orange.", "Un avocat!")

# Sélection: une ou un / ! ou . / fixed / ignore_Case
str_subset(fruits, fixed("un ", ignore_case = TRUE))
```

-   boundary() permet de changer le niveau d'évaluation

```{r}
# Texte avec
grand_texte <- "Ceci est le début d'\nune grande histoire. Quelle joie!"

# Compter: boundary, word, sentence
str_count(grand_texte, boundary("sentence"))
```

### str_detect() : Détecter les correspondances de motifs

```{r}
# Vecteur de fruits
fruits <- c("pomme", "banane", "orange")

# Détection
str_detect(fruits, "ne$") # Regex 6 caractères / début / fin

# Détection au début
str_starts(fruits, "or")

# Détection à la fin
str_ends(fruits, "ne")
```

### str_extract(): Extraire les correpsondance de motifs (pattern matching)

```{r}
# Exemple simple
str_extract_all(fruits, "an") # all

# Exemple avancé
texte <- "Contactez-nous aux adresses suivates: nom@gmail.com ou nom@outlook.com"

str_extract_all(texte, "\\w+@\\w+\\.\\w+") # all
```

### str_which: Quelle position correspond?

```{r}
# Vecteur de fruits
fruits <- c("pomme", "banane", "orange")

# Quelle position dans le vecteur?
str_which(fruits, "an") # negate
```

### str_replace(): Remplacer les motifs

```{r}
texte <- "Hello world!"
str_replace_all(texte, "o", "a")
```

### str_locate(): Détecter l'emplacement de motifs (début, fin)

```{r}
texte <- "Hello world et hello WeData!"

str_locate(texte, "Hello")
str_locate_all(texte, "ello")
```

### str_split(): Séparation

```{r}
texte <- "Hello world et hello WeData!"

langages <- c("R et Python", "Rust et Nim", "Julia et Javascript")

# Séparation simple liste/matrice
str_split(texte, " ") # et/caractères/simplify
str_split(langages, " ", simplify = TRUE)

# Séparation en vecteur
str_split_1(texte, " ")

# Matrice fixe
str_split_fixed(texte, " ", 2)
str_split_fixed(langages, " ", 3)

# Un seul élément
str_split_i(texte, " ", 5)
str_split_i(langages, " ", 3)
```

# str_flatten: Combine un vecteur de texte en un seul texte

```{r}
langages <- c("R", "Python", "Rust", "Nim", NA, "Julia", "Javascript")

# Réduction
str_flatten(langages, collapse = ", ", last = " et ") # collapse/last/na.rm

# Avec virgule
str_flatten_comma(langages, last = " et ")
```

Control matching: https://stringr.tidyverse.org/reference/modifiers.html

# Example nettoyer les données de participants:

```{r}
participants <-
  tibble(
    participant = c("amarie hernández", "kaito patel", "Sofia lee", "elijah Liu", "Aria martinez", "nalini García", "Zara wang"),
    telephone = c("0*78/456 1234", " 076 876 5432", "044 762 34 56", "076/645 4321", "(0) 91 456 7890", "041 765 43 21", "076 321 9876"),
    email = c("amarie.hernandez@outlook.com", "kaitopatel@gmail.com", "sylee@hotmail.co.uk", "elijahliu@icloud.com", "ariamartinez@protonmail.com", "nalinishree@yahoo.co.in", "zarawang@163.com")
  )
```

Nettoyage

1.  Majuscule dans les noms

2.  Une colonne prénom et une colonne nom

3.  Formater les numéros de tél. +41 xx-xxx-xx-xx

4.  Une colonne fournisseur d'email

```{r}
  
participants %>% 
  mutate(
    participant = str_to_title(participant),
    prenom = str_split_i(participant, " ", 1),
    nom = str_split_i(participant, " ", 2),
    telephone = str_remove_all(telephone, fixed("*")),
    telephone = str_remove_all(telephone, fixed("/")),
    telephone = str_remove_all(telephone, fixed("(")),
    telephone = str_remove_all(telephone, fixed(")")),
    telephone = str_remove_all(telephone, fixed(" ")),
    telephone = str_remove_all(telephone, fixed("0")),
    telephone = str_c(
      "+41 ",
      str_sub(telephone, 1, 2),
      "-",
      str_sub(telephone, 3, 5),
      "-",
      str_sub(telephone, 6, 7),
      "-",
      str_sub(telephone, 8, 9)
      ),
    email = str_split_i(email, "@", 2),
    email = str_remove(email, fixed(".com")),
    email = str_remove(email, fixed(".co.uk")),
    email = str_remove(email, fixed(".co.in")),
    .after = participant
  ) %>% 
  select(-participant)
```
